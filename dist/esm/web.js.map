{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAC,MAAM,iBAAiB,CAAC;AAa7E,MAAM,OAAO,qBACT,SAAQ,SAAS;IAEjB,KAAK,CAAC,SAAS,CAAC,QAA2B;QACvC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,QAAQ;QACV,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,qBAAqB,CACvB,QAAsC;QAEtC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,WAAW;QACb,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,OAAO;QACT,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,WAAW;QACb,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,YAAY;QACd,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,WAAW;QACb,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,cAAc;QAChB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,kBAAkB;QACpB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAEO,0BAA0B;QAC9B,OAAO,IAAI,kBAAkB,CACzB,uEAAuE,EACvE,aAAa,CAAC,WAAW,CAC5B,CAAC;IACN,CAAC;CACJ","sourcesContent":["import {CapacitorException, ExceptionCode, WebPlugin} from '@capacitor/core';\n\nimport type {\n    BarcodeScannerPlugin,\n    IsSupportedResult,\n    IsTorchAvailableResult,\n    IsTorchEnabledResult,\n    PermissionStatus,\n    ReadBarcodesFromImageOptions,\n    ReadBarcodesFromImageResult,\n    StartScanOptions,\n} from './definitions';\n\nexport class BarcodeScannerWeb\n    extends WebPlugin\n    implements BarcodeScannerPlugin {\n    async startScan(_options?: StartScanOptions): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async stopScan(): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async readBarcodesFromImage(\n        _options: ReadBarcodesFromImageOptions,\n    ): Promise<ReadBarcodesFromImageResult> {\n        throw this.createUnavailableException();\n    }\n\n    async isSupported(): Promise<IsSupportedResult> {\n        throw this.createUnavailableException();\n    }\n\n    async setZoom(): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async enableTorch(): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async disableTorch(): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async toggleTorch(): Promise<void> {\n        throw this.createUnavailableException();\n    }\n\n    async isTorchEnabled(): Promise<IsTorchEnabledResult> {\n        throw this.createUnavailableException();\n    }\n\n    async isTorchAvailable(): Promise<IsTorchAvailableResult> {\n        throw this.createUnavailableException();\n    }\n\n    async checkPermissions(): Promise<PermissionStatus> {\n        throw this.createUnavailableException();\n    }\n\n    async requestPermissions(): Promise<PermissionStatus> {\n        throw this.createUnavailableException();\n    }\n\n    private createUnavailableException(): CapacitorException {\n        return new CapacitorException(\n            'This Barcode Scanner plugin method is not available on this platform.',\n            ExceptionCode.Unavailable,\n        );\n    }\n}"]}